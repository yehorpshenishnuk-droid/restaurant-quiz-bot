import asyncio
import os
import random
import datetime
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from google.oauth2.service_account import Credentials

# --- Load environment variables ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
POSTER_TOKEN = os.getenv("POSTER_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")

# --- Google Sheets connection ---
credentials = Credentials.from_service_account_file(
    os.getenv("GOOGLE_APPLICATION_CREDENTIALS"),
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SHEET_ID).sheet1

# --- Bot initialization ---
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# --- Example questions ---
questions = [
    {
        "dish": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä",
        "question": "–Ø–∫–∞ –≤–∞–≥–∞ —Å–∞–ª–∞—Ç—É –¶–µ–∑–∞—Ä?",
        "options": ["200 –≥", "250 –≥", "300 –≥", "350 –≥"],
        "answer": "300 –≥"
    },
    {
        "dish": "–ü–ª–æ–≤ —è–∫–∏–π –í–∏ –ø–æ–ª—é–±–∏—Ç–µ",
        "question": "–Ø–∫–∞ —Ü—ñ–Ω–∞ –ø–ª–æ–≤—É?",
        "options": ["139 ‚Ç¥", "149 ‚Ç¥", "159 ‚Ç¥", "169 ‚Ç¥"],
        "answer": "169 ‚Ç¥"
    },
]

user_progress = {}

async def send_question(user_id):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    if user_id not in user_progress:
        user_progress[user_id] = {"index": 0, "correct": 0}

    idx = user_progress[user_id]["index"]

    if idx >= len(questions):
        await bot.send_message(
            user_id,
            f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {user_progress[user_id]['correct']}/{len(questions)}"
        )
        # –∑–∞–ø–∏—Å —É Google Sheet
        sheet.append_row([
            str(datetime.datetime.now()),
            str(user_id),
            user_progress[user_id]["correct"],
            len(questions)
        ])
        user_progress.pop(user_id)
        return

    q = questions[idx]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=opt)] for opt in q["options"]],
        resize_keyboard=True
    )

    await bot.send_message(user_id, f"‚ùì {q['question']}", reply_markup=keyboard)

    async def timeout():
        await asyncio.sleep(10)
        if user_progress.get(user_id) and user_progress[user_id]["index"] == idx:
            user_progress[user_id]["index"] += 1
            await bot.send_message(user_id, "‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!")
            await send_question(user_id)

    asyncio.create_task(timeout())

@dp.message(Command("start"))
async def start_test(message: types.Message):
    user_id = message.from_user.id
    user_progress[user_id] = {"index": 0, "correct": 0}
    await bot.send_message(user_id, "üçΩÔ∏è –ü–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç –ø–æ –º–µ–Ω—é!")
    await send_question(user_id)

@dp.message(F.text)
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    if user_id not in user_progress:
        await bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ /start —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç.")
        return

    idx = user_progress[user_id]["index"]
    q = questions[idx]

    if message.text == q["answer"]:
        user_progress[user_id]["correct"] += 1
        await bot.send_message(user_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await bot.send_message(user_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {q['answer']}")

    user_progress[user_id]["index"] += 1
    await send_question(user_id)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
