import asyncio
import logging
import random
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SHEET_ID") or os.getenv("SPREADSHEET_ID")

if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
if not SPREADSHEET_ID:
    raise ValueError("‚ùå SHEET_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

logging.basicConfig(level=logging.INFO)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def get_google_sheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    
    # –ù–∞ Render —Ñ–∞–π–ª –±—É–¥–µ –≤ /etc/secrets/
    creds_path = "/etc/secrets/project-telegram-bot-475412-704fc4e68815.json"
    
    # –Ø–∫—â–æ —Ñ–∞–π–ª—É –Ω–µ–º–∞—î (–ª–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞), —à—É–∫–∞—î–º–æ creds.json
    if not os.path.exists(creds_path):
        creds_path = "creds.json"
    
    logging.info(f"üìÇ –ß–∏—Ç–∞—î–º–æ credentials –∑: {creds_path}")
    creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    logging.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Google Sheets!")
    return sheet

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def get_random_questions(sheet, count=15):
    data = sheet.get_all_records()
    logging.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(data)} –ø–∏—Ç–∞–Ω—å —É —Ç–∞–±–ª–∏—Ü—ñ")
    if len(data) < count:
        count = len(data)
    return random.sample(data, count)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üçΩ –ü–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç –ø–æ –º–µ–Ω—é!")
    try:
        sheet = get_google_sheet()
        questions = get_random_questions(sheet)
        await run_quiz(message, questions)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        logging.error(f"Error: {e}", exc_info=True)

# –¢–µ—Å—Ç (–£–í–ê–ì–ê: —Ü–µ –Ω–µ –ø—Ä–∞—Ü—é—î –≤ aiogram 3.x - –ø–æ—Ç—Ä—ñ–±–µ–Ω FSM!)
async def run_quiz(message: types.Message, questions):
    correct = 0
    for q in questions:
        question_text = f"‚ùì {q['question']}"
        options = q['options'].split(",")
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text=o.strip())] for o in options],
            resize_keyboard=True
        )
        await message.answer(question_text, reply_markup=keyboard)

        # TODO: –¶–µ –ù–ï –ü–†–ê–¶–Æ–Ñ –≤ aiogram 3.x - –ø–æ—Ç—Ä—ñ–±–µ–Ω FSM
        try:
            answer = await dp.bot.wait_for(
                "message",
                timeout=10,
                check=lambda msg: msg.from_user.id == message.from_user.id
            )
        except asyncio.TimeoutError:
            await message.answer("‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!", reply_markup=types.ReplyKeyboardRemove())
            continue

        if answer.text.strip().lower() == q['answer'].strip().lower():
            correct += 1
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
        else:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {q['answer']}", reply_markup=types.ReplyKeyboardRemove())

    await message.answer(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {correct}/{len(questions)}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    bot = Bot(token=TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
```

---

## –ù–µ –∑–∞–±—É–¥—å: –î–∞–π –¥–æ—Å—Ç—É–ø –¥–æ Google Sheets!

–í—ñ–¥–∫—Ä–∏–π —Å–≤–æ—é —Ç–∞–±–ª–∏—Ü—é ‚Üí "Share" (–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è) ‚Üí –î–æ–¥–∞–π email:
```
greco-bot@project-telegram-bot-475412.iam.gserviceaccount.com
