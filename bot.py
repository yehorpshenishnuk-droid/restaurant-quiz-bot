import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import gspread
import os
from oauth2client.service_account import ServiceAccountCredentials

logging.basicConfig(level=logging.INFO)

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SHEET_ID = os.getenv("SHEET_ID")

# ==== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets ====
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("project-telegram-bot-475412-704fc4e68815.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_key(SHEET_ID).sheet1

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram ====
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# ==== –í–æ–ø—Ä–æ—Å—ã ====
QUESTIONS = [
    {"q": "ü•ó –Ø–∫–∞ –≤–∞–≥–∞ –¶–µ–∑–∞—Ä—è –∑ –∫—É—Ä–∫–æ—é?", "options": ["180 –≥", "200 –≥", "220 –≥", "250 –≥"], "a": "200 –≥"},
    {"q": "üçõ –Ø–∫–∞ —Ü—ñ–Ω–∞ –ø–ª–æ–≤—É?", "options": ["139 ‚Ç¥", "149 ‚Ç¥", "159 ‚Ç¥", "169 ‚Ç¥"], "a": "169 ‚Ç¥"},
]

# ==== –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ====
user_progress = {}


# ==== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ====
async def send_question(user_id):
    progress = user_progress[user_id]
    if progress["index"] >= len(QUESTIONS):
        await bot.send_message(user_id, f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {progress['correct']}/{len(QUESTIONS)}")
        sheet.append_row([progress["name"], str(datetime.now()), progress["correct"], len(QUESTIONS)])
        return

    q = QUESTIONS[progress["index"]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=opt)] for opt in q["options"]],
        resize_keyboard=True
    )

    await bot.send_message(user_id, f"‚ùì {q['q']}", reply_markup=keyboard)

    # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–≤–µ—Ç
    await asyncio.sleep(10)
    if progress["waiting"]:
        progress["waiting"] = False
        await bot.send_message(user_id, "‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!")
        progress["index"] += 1
        await send_question(user_id)


# ==== –ö–æ–º–∞–Ω–¥–∞ /start ====
@dp.message(Command("start"))
async def start_test(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.full_name

    user_progress[user_id] = {"index": 0, "correct": 0, "waiting": True, "name": name}

    await message.answer("üçΩ –ü–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç –ø–æ –º–µ–Ω—é!")
    await send_question(user_id)


# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ====
@dp.message()
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_progress:
        await message.answer("–ù–∞–ø–∏—à–∏ /start —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç.")
        return

    progress = user_progress[user_id]
    if not progress["waiting"]:
        return

    q = QUESTIONS[progress["index"]]
    answer = message.text.strip()

    progress["waiting"] = False
    if answer == q["a"]:
        progress["correct"] += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {q['a']}")

    progress["index"] += 1
    await send_question(user_id)


# ==== –ó–∞–ø—É—Å–∫ ====
async def main():
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ webhook/polling —Å–µ—Å—Å–∏–∏ (—Ä–µ—à–∞–µ—Ç TelegramConflictError)
    await bot.delete_webhook(drop_pending_updates=True)
    print("Webhook —É–¥–∞–ª—ë–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling‚Ä¶")

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
