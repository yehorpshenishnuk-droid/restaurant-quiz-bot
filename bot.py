import asyncio
import logging
import random
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è
load_dotenv()

TOKEN = os.getenv("TELEGRAM_TOKEN") or os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SHEET_ID") or os.getenv("SPREADSHEET_ID")

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN not found!")
if not SPREADSHEET_ID:
    raise ValueError("SHEET_ID not found!")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# FSM States –¥–ª—è –∫–≤—ñ–∑—É
class QuizStates(StatesGroup):
    waiting_for_answer = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
def get_google_sheet():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    
    # –®–ª—è—Ö –¥–æ credentials –Ω–∞ Render –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
    creds_path = "/etc/secrets/project-telegram-bot-475412-704fc4e68815.json"
    if not os.path.exists(creds_path):
        creds_path = "creds.json"
    
    logging.info(f"Reading credentials from: {creds_path}")
    creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(SPREADSHEET_ID).sheet1
    logging.info("Successfully connected to Google Sheets!")
    return sheet

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å
def get_random_questions(sheet, count=15):
    data = sheet.get_all_records()
    logging.info(f"Found {len(data)} questions in sheet")
    if len(data) < count:
        count = len(data)
    return random.sample(data, count)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(
        "üçΩ –í—ñ—Ç–∞—é! –ü–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç –ø–æ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É!\n\n"
        "–Ø –∑–∞–¥–∞–º —Ç–æ–±—ñ 15 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å.\n"
        "–í–∏–±–∏—Ä–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –∑ Google Sheets
        sheet = get_google_sheet()
        questions = get_random_questions(sheet)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–≤—ñ–∑—É –≤ state
        await state.update_data(
            questions=questions,
            current_question=0,
            correct_answers=0
        )
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∫–≤—ñ–∑
        await send_question(message, state)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –ø–∏—Ç–∞–Ω—å:\n{str(e)}")
        logging.error(f"Error loading questions: {e}", exc_info=True)

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–∏—Ç–∞–Ω–Ω—è
async def send_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data['questions']
    current = data['current_question']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —â–µ –ø–∏—Ç–∞–Ω–Ω—è
    if current >= len(questions):
        await finish_quiz(message, state)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    q = questions[current]
    question_text = f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {current + 1}/{len(questions)}\n\n{q['question']}"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    options = [opt.strip() for opt in q['options'].split(",")]
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=opt)] for opt in options],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(question_text, reply_markup=keyboard)
    await state.set_state(QuizStates.waiting_for_answer)

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
@dp.message(QuizStates.waiting_for_answer, F.text)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    questions = data['questions']
    current = data['current_question']
    correct_count = data['correct_answers']
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    correct_answer = questions[current]['answer'].strip().lower()
    user_answer = message.text.strip().lower()
    
    if user_answer == correct_answer:
        correct_count += 1
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {questions[current]['answer']}",
            reply_markup=types.ReplyKeyboardRemove()
        )
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
    await state.update_data(
        current_question=current + 1,
        correct_answers=correct_count
    )
    
    # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–∏—Ç–∞–Ω–Ω—è–º
    await asyncio.sleep(1)
    
    # –ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è
    await send_question(message, state)

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫–≤—ñ–∑—É
async def finish_quiz(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct = data['correct_answers']
    total = len(data['questions'])
    
    percentage = (correct / total) * 100
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É
    if percentage >= 90:
        grade = "üèÜ –í—ñ–¥–º—ñ–Ω–Ω–æ!"
    elif percentage >= 70:
        grade = "üëç –î–æ–±—Ä–µ!"
    elif percentage >= 50:
        grade = "üòê –ó–∞–¥–æ–≤—ñ–ª—å–Ω–æ"
    else:
        grade = "üòî –ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥—É—á–∏—Ç–∏ –º–µ–Ω—é"
    
    result_text = (
        f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{total} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π\n"
        f"üìà –í—ñ–¥—Å–æ—Ç–æ–∫: {percentage:.1f}%\n\n"
        f"{grade}\n\n"
        f"–©–æ–± –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω–∏ /start"
    )
    
    await message.answer(result_text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = (
        "üìö –î–æ–ø–æ–º–æ–≥–∞\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –≤–∏–≤—á–∏—Ç–∏ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "/cancel - –°–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–µ—Å—Ç\n\n"
        "–ü—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É –ø—Ä–æ—Å—Ç–æ –≤–∏–±–∏—Ä–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤."
    )
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /cancel
@dp.message(Command("cancel"))
async def cancel_command(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer("–ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É.")
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –¢–µ—Å—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω–∏ /start",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—ñ–¥ —á–∞—Å –∫–≤—ñ–∑—É
@dp.message(QuizStates.waiting_for_answer)
async def unknown_answer(message: types.Message):
    await message.answer(
        "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ –Ω–∏–∂—á–µ."
    )

# –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message()
async def echo(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ /start —â–æ–± –ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç –ø–æ –º–µ–Ω—é.\n"
        "–ê–±–æ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏."
    )

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    bot = Bot(token=TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("ü§ñ Bot started successfully!")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped manually.")
